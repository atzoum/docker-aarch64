#!groovy

node {
    def imageName = 'aarch64-traefik'

    stage('checkout') {
        git url: 'https://github.com/atzoum/docker-aarch64.git'
    }
    
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS']]) {
        withEnv(["PATH+DOCKER=/var/jenkins_home/docker-1.12.5","DOCKER_HOST=tcp://${DOCKER_HOSTNAME}:2375"]) {
            
            stage('build') {
                
                echo "building ${imageName}"
                sh """
                     docker build -t ${DOCKER_USER}/${imageName}:${TRAEFIK_VERSION} --build-arg TRAEFIK_VERSION=${TRAEFIK_VERSION} ${imageName}/
                """
            }
            
            stage('test') {
                
                echo "testing ${imageName}"
                sh """
                     docker run --rm ${DOCKER_USER}/${imageName}:${TRAEFIK_VERSION} version
                """
            }

            stage('push') {
                
                echo "pushing ${imageName}"
                sh """
                     docker login -u="$DOCKER_USER" -p="$DOCKER_PASS" && \\
                     docker tag ${DOCKER_USER}/${imageName}:${TRAEFIK_VERSION} ${DOCKER_USER}/${imageName}:latest && \\
                     docker push ${DOCKER_USER}/${imageName}:${TRAEFIK_VERSION} && \\
                     docker push ${DOCKER_USER}/${imageName}:latest
                """
            }

            stage('update description') {
                
                def fullDescription = readFile "${imageName}/README.md"
                def token = readJson(
                    sh(
                        returnStdout: true, 
                        script: "curl -s -H \"Content-Type: application/json\" -X POST -d '{\"username\": \"${DOCKER_USER}\", \"password\": \"${DOCKER_PASS}\"}\' https://hub.docker.com/v2/users/login/")
                    ).token

                httpRequest(
                    url: "https://hub.docker.com/v2/repositories/atzoum/${imageName}/", 
                    httpMode: 'PATCH', 
                    requestBody: writeJson([full_description: fullDescription]), 
                    customHeaders: [[name: 'Content-Type', value: 'application/json'], [name: 'Authorization', value: "JWT ${token}"]], 
                    validResponseCodes: '200', 
                    consoleLogResponseBody: true)
            }
        }
    }
}

@NonCPS
def readJson(String input) {
  final slurper = new groovy.json.JsonSlurper()
  return new HashMap<>(slurper.parseText(input))
}

@NonCPS
def writeJson(v) {
  groovy.json.JsonOutput.toJson(v)
}
